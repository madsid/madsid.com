{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"d6cc8c2730e89bbee83e01a5a4490f8dbf12c332","modified":1487698896902},{"_id":"themes/apollo/_config.yml","hash":"e8cca5f618fffb5dbb2a2583ec1d25a037e41f4d","modified":1487699013527},{"_id":"themes/apollo/package.json","hash":"0d5ce6285683fbd19a8b658812195041bff1b609","modified":1487698896994},{"_id":"themes/apollo/gulpfile.js","hash":"3bf61bca569665944cc61ac0483c9d568a4f58d7","modified":1487698896915},{"_id":"themes/apollo/languages/en.yml","hash":"29b8e211d422cb846af005bd1c21435b45ed6457","modified":1487698896918},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"05ef430fa5586e919839bad35aba4a9690e8e672","modified":1487698896920},{"_id":"themes/apollo/layout/archive.jade","hash":"a993dddad0213cfc4adbf5d25597b7effac758b0","modified":1487698896925},{"_id":"themes/apollo/layout/index.jade","hash":"fd11746c566d9fb6de1224a2992e3e443a83c139","modified":1487698896929},{"_id":"themes/apollo/LICENSE","hash":"1588511f0c37609ebfb55298b83a77ae5afca870","modified":1487698896906},{"_id":"themes/apollo/README.md","hash":"1ffc5fdab2fe7f6d55af026cff0706c3107b8676","modified":1487698896909},{"_id":"themes/apollo/layout/post.jade","hash":"ada9f5f76819ff76d2c37c893431dfdb808e19b7","modified":1487698896994},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1487698896994},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"47712f8bb3d84ff6a2742f923626d568779fc45a","modified":1487698896933},{"_id":"source/_posts/React-Simple-React-App.md","hash":"e4940188129e3c9314f94ac5f4cb6c9ba92141b2","modified":1487698896901},{"_id":"themes/apollo/layout/partial/head.jade","hash":"229aa1f23f8be01eb5400abb5485183b487731d5","modified":1487698896983},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"185aa2a3f86176b4924adac06ef576b365440c20","modified":1487698896981},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"54545f4a0c0ca26156364258bf9f4d74fc611f84","modified":1487698896986},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"b9a6ca7d8769312cef09c86dbd6828bc04663ca2","modified":1487698896960},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"671b604bc38f43dfb17ea2592639ed27f4845e9f","modified":1487698896989},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ada3f92eb6b97263bbe562b56aeb1349a8a81fc4","modified":1487698896977},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"34d5c23ed896d7ed67d7997bb9efbebb5816d06f","modified":1487698896994},{"_id":"themes/apollo/source/css/apollo.css","hash":"fcba026c98d37954f486a1a79b90190e2a031abc","modified":1487783882353},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"844926ed4be619cd6b02682eca0447e4d0f6ed70","modified":1487698897044},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1487698897011},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"4ede69b12919439b4ae404a1e1d498cb8fd2932a","modified":1487698897036},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"3003361c281d7aa1cfed944ad0da180ac05f2c32","modified":1487698897011},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"8cd2631d46be05a9518f1966bd84e1a8b0270857","modified":1487698897041},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"a6aeb5177f370f984565f7b6f0a18fe27545d34d","modified":1487698897044},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"c7632542c53368fb831e6583f4ce79ba1ba920ed","modified":1487698897044},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"658eef39c7cf6f730f784751c2e4701e8eb02e0d","modified":1487698897044},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1487698896994},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"e87b144a8389eefeab4f50c353eef18c428a761c","modified":1487698897039},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"50d80a5eebebebeadb61841923d1796be004868b","modified":1487698897044},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"612b367b0e9a0b9f66d37694ee64ce896c552967","modified":1487698897044}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"React: Create a simple app","date":"2017-02-12T23:04:33.000Z","desc":"Simple React App","_content":"\nLearn the basics of react by creating a simple app with just using react and not worry about anything else.\n\n**[Demo](http://madsid.com/pages/chucknorris/)**  || **[Code](https://github.com/madsid/myReact/tree/chucknorris)** \n\n## You Will Learn\n- React Components ( Container and presentation)\n- Props and State\n- React Component lifecycle\n- React inline styles\n\n## [React Components](https://facebook.github.io/react/docs/components-and-props.html): \n\nReact lets you split the UI into components which is isolated and reusable. For Example if you are creating a movie site and need a rating bar. You can create a component for that and use it as many times as needed.  \n\nBasically components are divided into two types:  \n- Container component \n- Presentation component  \n\n### __Container components:__ \nThese are the high level components which coordinates with the  application to provide data to other container or presentation components. You can think of them as data sources.  \n\n### __Presentation components:__ \nThese are low level components which interact with the container component to get the data passed via props (more about it later) and all they worry about is about presenting the data. They do not worry about data origin or anything to do with it.  \n\n### **Props:** \nProps is a javascript object which is passed on to the child components. This is mostly used by container components to pass the information to the presentation components.  \n\n### **State:** \nState is also a javascript object but stores the application information and can be altered as the application changes. For Example, storing name of the user or storing data received via API calls. Remember to not change the state object directly.   \n\n### **[Component Lifecycle:](https://facebook.github.io/react/docs/react-component.html)**\nReact provides super awesome functions for each components to use for several purposes and are called for each event that occurs in the life cycle of a component. Some of them are  \n\n#### **`ComponentWillMount()`:** \nThis function is called when the component is going to mount to the page.  \n\n#### **`ComponentDidMount()`:**\nThis function is called when the component is mounted to the page. This is when we fetch the data (Jokes in this case) and render them.  \n\n### **Inline Styles:** \nThis is another feature I love in react. Each component can have it's own Inline styles. This is a controversial topic since it will overwrite the global styles by default, but it's a cool feature.  \n\nCreate-react-app is an awesome boilerplate for starters to learn just react. This tutorial is built using on top of this.   \n\nOpen the console/terminal and type the below commands. (you need to have node js installed on your machine)  \n\n```bash\nnpm install -g create-react-app \ncreate-react-app my-app \ncd my-app/ \nnpm start \n```\n\nThis should start a server with simple welcome page.  \n\nAlright, Now that we are done with introduction. Let's get to building stuff. Fire up your favorite code editor and follow along the tutorial code.   \n\nNote: If you do not want to mess around with inline styles, you can copy them from the source code.  \n\nIf you would like to run the tutorial code locally. \n\n```bash \ngit clone  -b chucknorris --single-branch https://github.com/madsid/myReact.git <name> \ncd <name>/ \nnpm install  \nnpm start  \n```\n\nAssuming you looked at the demo page. Our first task is to identify the components. I imagine two components.  \n\n1. **Joke block** is a container component contains all the jokes and passes to other component to render it  \n\n2. **joke** is a presentation component, gets the joke via props and will render it. \n\nNanoajax is a tiny library which allows us to make ajax calls without getting too much into the details.  \n\n```jsx\nimport React, { Component } from 'react';\nimport Joke from './Joke';\nimport nanoajax from 'nanoajax';\n\nclass JokeBlock extends Component {\n  constructor(props) {\n  super(props);\n    this.state = {\n      data: []\n    };\n\n    this.getData = this.getData.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getData(){\n    nanoajax.ajax({url:\"http://api.icndb.com/jokes/random/5\"}, function(code, resp){\n      if(code === 200){\n        resp = JSON.parse(resp);\n        this.setState({\n            data : resp.value\n        });\n      }\n    }.bind(this));\n  }\n\n  handleClick(){\n    this.getData();\n  }\n  componentDidMount(){\n    this.getData();\n  }\n\n  render() {\n    var jokes = this.state.data.map(function(joke){\n      return (\n        <div key={joke.id}>\n          <Joke data={joke.joke}/>\n        </div>\n      )\n    });\n    return (\n      <div style={styles.main}>\n        <p style={styles.reload} onClick={this.handleClick} > More &#x21bb;</p>\n        <hr style={styles.hr} />\n        <div> {jokes} </div> \n      </div>\n    );\n  };\n}\n```\n\n\nLet's set the state in constructor to an empty array which is loaded later. As soon as the component mounts we make the call to get the jokes data.  \n\nThe most important thing to notice in the code it `this.setState()` to set the state when data is received. This let’s react know something is changed and this component has to be re-rendered.  \n\nThere is an onClick handler for the more link which calls the `getData()` function to fetch new joke dataset and updates the state.  \n\n```jsx\nimport React, { Component } from 'react';\n\nclass Joke extends Component {\n  render() {\n    return (\n      <div style={styles.main}>\n        <div style={styles.blockquote}> \n          <p style={styles.joke}> {this.props.data} </p>\n        </div>\n        <hr style={styles.hr}/>\n      </div>\n    );\n  }\n}\n```\nIt displays whatever data it receives from the props object. Which you can notice from `this.props.data` in the code.  \n\n# What Next  \n\nI hope you enjoyed this article as much as I did writing it. This is my first article so please excuse my mistakes.  \n\nI recommend to checkout [redux](http://redux.js.org/) or [flux](https://facebook.github.io/flux/) for a full react application with efficient state management once you get familiar with react. Also ES6 is heavily used in react community so, check it out as well. ","source":"_posts/React-Simple-React-App.md","raw":"---\ntitle: 'React: Create a simple app'\ndate: 2017-02-12 17:04:33\ntags: React \ndesc: Simple React App\n---\n\nLearn the basics of react by creating a simple app with just using react and not worry about anything else.\n\n**[Demo](http://madsid.com/pages/chucknorris/)**  || **[Code](https://github.com/madsid/myReact/tree/chucknorris)** \n\n## You Will Learn\n- React Components ( Container and presentation)\n- Props and State\n- React Component lifecycle\n- React inline styles\n\n## [React Components](https://facebook.github.io/react/docs/components-and-props.html): \n\nReact lets you split the UI into components which is isolated and reusable. For Example if you are creating a movie site and need a rating bar. You can create a component for that and use it as many times as needed.  \n\nBasically components are divided into two types:  \n- Container component \n- Presentation component  \n\n### __Container components:__ \nThese are the high level components which coordinates with the  application to provide data to other container or presentation components. You can think of them as data sources.  \n\n### __Presentation components:__ \nThese are low level components which interact with the container component to get the data passed via props (more about it later) and all they worry about is about presenting the data. They do not worry about data origin or anything to do with it.  \n\n### **Props:** \nProps is a javascript object which is passed on to the child components. This is mostly used by container components to pass the information to the presentation components.  \n\n### **State:** \nState is also a javascript object but stores the application information and can be altered as the application changes. For Example, storing name of the user or storing data received via API calls. Remember to not change the state object directly.   \n\n### **[Component Lifecycle:](https://facebook.github.io/react/docs/react-component.html)**\nReact provides super awesome functions for each components to use for several purposes and are called for each event that occurs in the life cycle of a component. Some of them are  \n\n#### **`ComponentWillMount()`:** \nThis function is called when the component is going to mount to the page.  \n\n#### **`ComponentDidMount()`:**\nThis function is called when the component is mounted to the page. This is when we fetch the data (Jokes in this case) and render them.  \n\n### **Inline Styles:** \nThis is another feature I love in react. Each component can have it's own Inline styles. This is a controversial topic since it will overwrite the global styles by default, but it's a cool feature.  \n\nCreate-react-app is an awesome boilerplate for starters to learn just react. This tutorial is built using on top of this.   \n\nOpen the console/terminal and type the below commands. (you need to have node js installed on your machine)  \n\n```bash\nnpm install -g create-react-app \ncreate-react-app my-app \ncd my-app/ \nnpm start \n```\n\nThis should start a server with simple welcome page.  \n\nAlright, Now that we are done with introduction. Let's get to building stuff. Fire up your favorite code editor and follow along the tutorial code.   \n\nNote: If you do not want to mess around with inline styles, you can copy them from the source code.  \n\nIf you would like to run the tutorial code locally. \n\n```bash \ngit clone  -b chucknorris --single-branch https://github.com/madsid/myReact.git <name> \ncd <name>/ \nnpm install  \nnpm start  \n```\n\nAssuming you looked at the demo page. Our first task is to identify the components. I imagine two components.  \n\n1. **Joke block** is a container component contains all the jokes and passes to other component to render it  \n\n2. **joke** is a presentation component, gets the joke via props and will render it. \n\nNanoajax is a tiny library which allows us to make ajax calls without getting too much into the details.  \n\n```jsx\nimport React, { Component } from 'react';\nimport Joke from './Joke';\nimport nanoajax from 'nanoajax';\n\nclass JokeBlock extends Component {\n  constructor(props) {\n  super(props);\n    this.state = {\n      data: []\n    };\n\n    this.getData = this.getData.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getData(){\n    nanoajax.ajax({url:\"http://api.icndb.com/jokes/random/5\"}, function(code, resp){\n      if(code === 200){\n        resp = JSON.parse(resp);\n        this.setState({\n            data : resp.value\n        });\n      }\n    }.bind(this));\n  }\n\n  handleClick(){\n    this.getData();\n  }\n  componentDidMount(){\n    this.getData();\n  }\n\n  render() {\n    var jokes = this.state.data.map(function(joke){\n      return (\n        <div key={joke.id}>\n          <Joke data={joke.joke}/>\n        </div>\n      )\n    });\n    return (\n      <div style={styles.main}>\n        <p style={styles.reload} onClick={this.handleClick} > More &#x21bb;</p>\n        <hr style={styles.hr} />\n        <div> {jokes} </div> \n      </div>\n    );\n  };\n}\n```\n\n\nLet's set the state in constructor to an empty array which is loaded later. As soon as the component mounts we make the call to get the jokes data.  \n\nThe most important thing to notice in the code it `this.setState()` to set the state when data is received. This let’s react know something is changed and this component has to be re-rendered.  \n\nThere is an onClick handler for the more link which calls the `getData()` function to fetch new joke dataset and updates the state.  \n\n```jsx\nimport React, { Component } from 'react';\n\nclass Joke extends Component {\n  render() {\n    return (\n      <div style={styles.main}>\n        <div style={styles.blockquote}> \n          <p style={styles.joke}> {this.props.data} </p>\n        </div>\n        <hr style={styles.hr}/>\n      </div>\n    );\n  }\n}\n```\nIt displays whatever data it receives from the props object. Which you can notice from `this.props.data` in the code.  \n\n# What Next  \n\nI hope you enjoyed this article as much as I did writing it. This is my first article so please excuse my mistakes.  \n\nI recommend to checkout [redux](http://redux.js.org/) or [flux](https://facebook.github.io/flux/) for a full react application with efficient state management once you get familiar with react. Also ES6 is heavily used in react community so, check it out as well. ","slug":"React-Simple-React-App","published":1,"updated":"2017-02-21T17:41:36.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gh151q00007o57fr28a9il","content":"<p>Learn the basics of react by creating a simple app with just using react and not worry about anything else.</p>\n<p><strong><a href=\"http://madsid.com/pages/chucknorris/\">Demo</a></strong>  || <strong><a href=\"https://github.com/madsid/myReact/tree/chucknorris\" target=\"_blank\" rel=\"external\">Code</a></strong> </p>\n<h2 id=\"You-Will-Learn\"><a href=\"#You-Will-Learn\" class=\"headerlink\" title=\"You Will Learn\"></a>You Will Learn</h2><ul>\n<li>React Components ( Container and presentation)</li>\n<li>Props and State</li>\n<li>React Component lifecycle</li>\n<li>React inline styles</li>\n</ul>\n<h2 id=\"React-Components\"><a href=\"#React-Components\" class=\"headerlink\" title=\"React Components:\"></a><a href=\"https://facebook.github.io/react/docs/components-and-props.html\" target=\"_blank\" rel=\"external\">React Components</a>:</h2><p>React lets you split the UI into components which is isolated and reusable. For Example if you are creating a movie site and need a rating bar. You can create a component for that and use it as many times as needed.  </p>\n<p>Basically components are divided into two types:  </p>\n<ul>\n<li>Container component </li>\n<li>Presentation component  </li>\n</ul>\n<h3 id=\"Container-components\"><a href=\"#Container-components\" class=\"headerlink\" title=\"Container components:\"></a><strong>Container components:</strong></h3><p>These are the high level components which coordinates with the  application to provide data to other container or presentation components. You can think of them as data sources.  </p>\n<h3 id=\"Presentation-components\"><a href=\"#Presentation-components\" class=\"headerlink\" title=\"Presentation components:\"></a><strong>Presentation components:</strong></h3><p>These are low level components which interact with the container component to get the data passed via props (more about it later) and all they worry about is about presenting the data. They do not worry about data origin or anything to do with it.  </p>\n<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props:\"></a><strong>Props:</strong></h3><p>Props is a javascript object which is passed on to the child components. This is mostly used by container components to pass the information to the presentation components.  </p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State:\"></a><strong>State:</strong></h3><p>State is also a javascript object but stores the application information and can be altered as the application changes. For Example, storing name of the user or storing data received via API calls. Remember to not change the state object directly.   </p>\n<h3 id=\"Component-Lifecycle\"><a href=\"#Component-Lifecycle\" class=\"headerlink\" title=\"Component Lifecycle:\"></a><strong><a href=\"https://facebook.github.io/react/docs/react-component.html\" target=\"_blank\" rel=\"external\">Component Lifecycle:</a></strong></h3><p>React provides super awesome functions for each components to use for several purposes and are called for each event that occurs in the life cycle of a component. Some of them are  </p>\n<h4 id=\"ComponentWillMount\"><a href=\"#ComponentWillMount\" class=\"headerlink\" title=\"ComponentWillMount():\"></a><strong><code>ComponentWillMount()</code>:</strong></h4><p>This function is called when the component is going to mount to the page.  </p>\n<h4 id=\"ComponentDidMount\"><a href=\"#ComponentDidMount\" class=\"headerlink\" title=\"ComponentDidMount():\"></a><strong><code>ComponentDidMount()</code>:</strong></h4><p>This function is called when the component is mounted to the page. This is when we fetch the data (Jokes in this case) and render them.  </p>\n<h3 id=\"Inline-Styles\"><a href=\"#Inline-Styles\" class=\"headerlink\" title=\"Inline Styles:\"></a><strong>Inline Styles:</strong></h3><p>This is another feature I love in react. Each component can have it’s own Inline styles. This is a controversial topic since it will overwrite the global styles by default, but it’s a cool feature.  </p>\n<p>Create-react-app is an awesome boilerplate for starters to learn just react. This tutorial is built using on top of this.   </p>\n<p>Open the console/terminal and type the below commands. (you need to have node js installed on your machine)  </p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\" >npm</span> <span class=\"token function\" >install</span> -g create-react-app \ncreate-react-app my-app \n<span class=\"token function\" >cd</span> my-app/ \n<span class=\"token function\" >npm</span> start\n</code></pre>\n<p>This should start a server with simple welcome page.  </p>\n<p>Alright, Now that we are done with introduction. Let’s get to building stuff. Fire up your favorite code editor and follow along the tutorial code.   </p>\n<p>Note: If you do not want to mess around with inline styles, you can copy them from the source code.  </p>\n<p>If you would like to run the tutorial code locally. </p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\" >git</span> clone  -b chucknorris --single-branch https://github.com/madsid/myReact.git <span class=\"token operator\" >&lt;</span>name<span class=\"token operator\" >></span> \n<span class=\"token function\" >cd</span> <span class=\"token operator\" >&lt;</span>name<span class=\"token operator\" >></span>/ \n<span class=\"token function\" >npm</span> <span class=\"token function\" >install</span>  \n<span class=\"token function\" >npm</span> start\n</code></pre>\n<p>Assuming you looked at the demo page. Our first task is to identify the components. I imagine two components.  </p>\n<ol>\n<li><p><strong>Joke block</strong> is a container component contains all the jokes and passes to other component to render it  </p>\n</li>\n<li><p><strong>joke</strong> is a presentation component, gets the joke via props and will render it. </p>\n</li>\n</ol>\n<p>Nanoajax is a tiny library which allows us to make ajax calls without getting too much into the details.  </p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\" >import</span> React<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> Component <span class=\"token punctuation\" >}</span> <span class=\"token keyword\" >from</span> <span class=\"token string\" >'react'</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >import</span> Joke <span class=\"token keyword\" >from</span> <span class=\"token string\" >'./Joke'</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >import</span> nanoajax <span class=\"token keyword\" >from</span> <span class=\"token string\" >'nanoajax'</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >class</span> <span class=\"token class-name\" >JokeBlock</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >Component</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token function\" >constructor</span><span class=\"token punctuation\" >(</span>props<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >super</span><span class=\"token punctuation\" >(</span>props<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n    <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>state <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>\n      data<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span>\n    <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n\n    <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>getData <span class=\"token operator\" >=</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>getData<span class=\"token punctuation\" >.</span><span class=\"token function\" >bind</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >this</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n    <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>handleClick <span class=\"token operator\" >=</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>handleClick<span class=\"token punctuation\" >.</span><span class=\"token function\" >bind</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >this</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n\n  <span class=\"token function\" >getData</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >{</span>\n    nanoajax<span class=\"token punctuation\" >.</span><span class=\"token function\" >ajax</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>url<span class=\"token punctuation\" >:</span><span class=\"token string\" >\"http://api.icndb.com/jokes/random/5\"</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>code<span class=\"token punctuation\" >,</span> resp<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >{</span>\n      <span class=\"token keyword\" >if</span><span class=\"token punctuation\" >(</span>code <span class=\"token operator\" >===</span> <span class=\"token number\" >200</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >{</span>\n        resp <span class=\"token operator\" >=</span> JSON<span class=\"token punctuation\" >.</span><span class=\"token function\" >parse</span><span class=\"token punctuation\" >(</span>resp<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n        <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >setState</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n            data <span class=\"token punctuation\" >:</span> resp<span class=\"token punctuation\" >.</span>value\n        <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n      <span class=\"token punctuation\" >}</span>\n    <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >bind</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >this</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n\n  <span class=\"token function\" >handleClick</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >getData</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n  <span class=\"token function\" >componentDidMount</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token function\" >getData</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n\n  <span class=\"token function\" >render</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >var</span> jokes <span class=\"token operator\" >=</span> <span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>state<span class=\"token punctuation\" >.</span>data<span class=\"token punctuation\" >.</span><span class=\"token function\" >map</span><span class=\"token punctuation\" >(</span><span class=\"token keyword\" >function</span><span class=\"token punctuation\" >(</span>joke<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >{</span>\n      <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >(</span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >key</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>joke<span class=\"token punctuation\" >.</span>id<span class=\"token punctuation\" >}</span></span><span class=\"token punctuation\" >></span></span>\n          <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>Joke</span> <span class=\"token attr-name\" >data</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>joke<span class=\"token punctuation\" >.</span>joke<span class=\"token punctuation\" >}</span></span><span class=\"token punctuation\" >/></span></span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >></span></span>\n      <span class=\"token punctuation\" >)</span>\n    <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >(</span>\n      <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >style</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>styles<span class=\"token punctuation\" >.</span>main<span class=\"token punctuation\" >}</span></span><span class=\"token punctuation\" >></span></span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>p</span> <span class=\"token attr-name\" >style</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>styles<span class=\"token punctuation\" >.</span>reload<span class=\"token punctuation\" >}</span></span> <span class=\"token attr-name\" >onClick</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span><span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>handleClick<span class=\"token punctuation\" >}</span></span> <span class=\"token punctuation\" >></span></span> More <span class=\"token entity\" title=\"&#x21bb;\">&amp;#x21bb;</span><span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>p</span><span class=\"token punctuation\" >></span></span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>hr</span> <span class=\"token attr-name\" >style</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>styles<span class=\"token punctuation\" >.</span>hr<span class=\"token punctuation\" >}</span></span> <span class=\"token punctuation\" >/></span></span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span><span class=\"token punctuation\" >></span></span> <span class=\"token punctuation\" >{</span>jokes<span class=\"token punctuation\" >}</span> <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >></span></span> \n      <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >></span></span>\n    <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token punctuation\" >}</span>\n</code></pre>\n<p>Let’s set the state in constructor to an empty array which is loaded later. As soon as the component mounts we make the call to get the jokes data.  </p>\n<p>The most important thing to notice in the code it <code>this.setState()</code> to set the state when data is received. This let’s react know something is changed and this component has to be re-rendered.  </p>\n<p>There is an onClick handler for the more link which calls the <code>getData()</code> function to fetch new joke dataset and updates the state.  </p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\" >import</span> React<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> Component <span class=\"token punctuation\" >}</span> <span class=\"token keyword\" >from</span> <span class=\"token string\" >'react'</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token keyword\" >class</span> <span class=\"token class-name\" >Joke</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >Component</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token function\" >render</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token punctuation\" >(</span>\n      <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >style</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>styles<span class=\"token punctuation\" >.</span>main<span class=\"token punctuation\" >}</span></span><span class=\"token punctuation\" >></span></span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>div</span> <span class=\"token attr-name\" >style</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>styles<span class=\"token punctuation\" >.</span>blockquote<span class=\"token punctuation\" >}</span></span><span class=\"token punctuation\" >></span></span> \n          <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>p</span> <span class=\"token attr-name\" >style</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>styles<span class=\"token punctuation\" >.</span>joke<span class=\"token punctuation\" >}</span></span><span class=\"token punctuation\" >></span></span> <span class=\"token punctuation\" >{</span><span class=\"token keyword\" >this</span><span class=\"token punctuation\" >.</span>props<span class=\"token punctuation\" >.</span>data<span class=\"token punctuation\" >}</span> <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>p</span><span class=\"token punctuation\" >></span></span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >></span></span>\n        <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;</span>hr</span> <span class=\"token attr-name\" >style</span><span class=\"token script language-javascript\" ><span class=\"token punctuation\" >=</span><span class=\"token punctuation\" >{</span>styles<span class=\"token punctuation\" >.</span>hr<span class=\"token punctuation\" >}</span></span><span class=\"token punctuation\" >/></span></span>\n      <span class=\"token tag\" ><span class=\"token tag\" ><span class=\"token punctuation\" >&lt;/</span>div</span><span class=\"token punctuation\" >></span></span>\n    <span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n</code></pre>\n<p>It displays whatever data it receives from the props object. Which you can notice from <code>this.props.data</code> in the code.  </p>\n<h1 id=\"What-Next\"><a href=\"#What-Next\" class=\"headerlink\" title=\"What Next\"></a>What Next</h1><p>I hope you enjoyed this article as much as I did writing it. This is my first article so please excuse my mistakes.  </p>\n<p>I recommend to checkout <a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">redux</a> or <a href=\"https://facebook.github.io/flux/\" target=\"_blank\" rel=\"external\">flux</a> for a full react application with efficient state management once you get familiar with react. Also ES6 is heavily used in react community so, check it out as well. </p>\n<link href=\"/css/prism-okaidia.css\" rel=\"stylesheet\">","excerpt":"","more":"<p>Learn the basics of react by creating a simple app with just using react and not worry about anything else.</p>\n<p><strong><a href=\"http://madsid.com/pages/chucknorris/\">Demo</a></strong>  || <strong><a href=\"https://github.com/madsid/myReact/tree/chucknorris\">Code</a></strong> </p>\n<h2 id=\"You-Will-Learn\"><a href=\"#You-Will-Learn\" class=\"headerlink\" title=\"You Will Learn\"></a>You Will Learn</h2><ul>\n<li>React Components ( Container and presentation)</li>\n<li>Props and State</li>\n<li>React Component lifecycle</li>\n<li>React inline styles</li>\n</ul>\n<h2 id=\"React-Components\"><a href=\"#React-Components\" class=\"headerlink\" title=\"React Components:\"></a><a href=\"https://facebook.github.io/react/docs/components-and-props.html\">React Components</a>:</h2><p>React lets you split the UI into components which is isolated and reusable. For Example if you are creating a movie site and need a rating bar. You can create a component for that and use it as many times as needed.  </p>\n<p>Basically components are divided into two types:  </p>\n<ul>\n<li>Container component </li>\n<li>Presentation component  </li>\n</ul>\n<h3 id=\"Container-components\"><a href=\"#Container-components\" class=\"headerlink\" title=\"Container components:\"></a><strong>Container components:</strong></h3><p>These are the high level components which coordinates with the  application to provide data to other container or presentation components. You can think of them as data sources.  </p>\n<h3 id=\"Presentation-components\"><a href=\"#Presentation-components\" class=\"headerlink\" title=\"Presentation components:\"></a><strong>Presentation components:</strong></h3><p>These are low level components which interact with the container component to get the data passed via props (more about it later) and all they worry about is about presenting the data. They do not worry about data origin or anything to do with it.  </p>\n<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props:\"></a><strong>Props:</strong></h3><p>Props is a javascript object which is passed on to the child components. This is mostly used by container components to pass the information to the presentation components.  </p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State:\"></a><strong>State:</strong></h3><p>State is also a javascript object but stores the application information and can be altered as the application changes. For Example, storing name of the user or storing data received via API calls. Remember to not change the state object directly.   </p>\n<h3 id=\"Component-Lifecycle\"><a href=\"#Component-Lifecycle\" class=\"headerlink\" title=\"Component Lifecycle:\"></a><strong><a href=\"https://facebook.github.io/react/docs/react-component.html\">Component Lifecycle:</a></strong></h3><p>React provides super awesome functions for each components to use for several purposes and are called for each event that occurs in the life cycle of a component. Some of them are  </p>\n<h4 id=\"ComponentWillMount\"><a href=\"#ComponentWillMount\" class=\"headerlink\" title=\"ComponentWillMount():\"></a><strong><code>ComponentWillMount()</code>:</strong></h4><p>This function is called when the component is going to mount to the page.  </p>\n<h4 id=\"ComponentDidMount\"><a href=\"#ComponentDidMount\" class=\"headerlink\" title=\"ComponentDidMount():\"></a><strong><code>ComponentDidMount()</code>:</strong></h4><p>This function is called when the component is mounted to the page. This is when we fetch the data (Jokes in this case) and render them.  </p>\n<h3 id=\"Inline-Styles\"><a href=\"#Inline-Styles\" class=\"headerlink\" title=\"Inline Styles:\"></a><strong>Inline Styles:</strong></h3><p>This is another feature I love in react. Each component can have it’s own Inline styles. This is a controversial topic since it will overwrite the global styles by default, but it’s a cool feature.  </p>\n<p>Create-react-app is an awesome boilerplate for starters to learn just react. This tutorial is built using on top of this.   </p>\n<p>Open the console/terminal and type the below commands. (you need to have node js installed on your machine)  </p>\n<pre><code class=\"bash\">npm install -g create-react-app \ncreate-react-app my-app \ncd my-app/ \nnpm start\n</code></pre>\n<p>This should start a server with simple welcome page.  </p>\n<p>Alright, Now that we are done with introduction. Let’s get to building stuff. Fire up your favorite code editor and follow along the tutorial code.   </p>\n<p>Note: If you do not want to mess around with inline styles, you can copy them from the source code.  </p>\n<p>If you would like to run the tutorial code locally. </p>\n<pre><code class=\"bash\">git clone  -b chucknorris --single-branch https://github.com/madsid/myReact.git &lt;name&gt; \ncd &lt;name&gt;/ \nnpm install  \nnpm start\n</code></pre>\n<p>Assuming you looked at the demo page. Our first task is to identify the components. I imagine two components.  </p>\n<ol>\n<li><p><strong>Joke block</strong> is a container component contains all the jokes and passes to other component to render it  </p>\n</li>\n<li><p><strong>joke</strong> is a presentation component, gets the joke via props and will render it. </p>\n</li>\n</ol>\n<p>Nanoajax is a tiny library which allows us to make ajax calls without getting too much into the details.  </p>\n<pre><code class=\"jsx\">import React, { Component } from &#39;react&#39;;\nimport Joke from &#39;./Joke&#39;;\nimport nanoajax from &#39;nanoajax&#39;;\n\nclass JokeBlock extends Component {\n  constructor(props) {\n  super(props);\n    this.state = {\n      data: []\n    };\n\n    this.getData = this.getData.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getData(){\n    nanoajax.ajax({url:&quot;http://api.icndb.com/jokes/random/5&quot;}, function(code, resp){\n      if(code === 200){\n        resp = JSON.parse(resp);\n        this.setState({\n            data : resp.value\n        });\n      }\n    }.bind(this));\n  }\n\n  handleClick(){\n    this.getData();\n  }\n  componentDidMount(){\n    this.getData();\n  }\n\n  render() {\n    var jokes = this.state.data.map(function(joke){\n      return (\n        &lt;div key={joke.id}&gt;\n          &lt;Joke data={joke.joke}/&gt;\n        &lt;/div&gt;\n      )\n    });\n    return (\n      &lt;div style={styles.main}&gt;\n        &lt;p style={styles.reload} onClick={this.handleClick} &gt; More &amp;#x21bb;&lt;/p&gt;\n        &lt;hr style={styles.hr} /&gt;\n        &lt;div&gt; {jokes} &lt;/div&gt; \n      &lt;/div&gt;\n    );\n  };\n}\n</code></pre>\n<p>Let’s set the state in constructor to an empty array which is loaded later. As soon as the component mounts we make the call to get the jokes data.  </p>\n<p>The most important thing to notice in the code it <code>this.setState()</code> to set the state when data is received. This let’s react know something is changed and this component has to be re-rendered.  </p>\n<p>There is an onClick handler for the more link which calls the <code>getData()</code> function to fetch new joke dataset and updates the state.  </p>\n<pre><code class=\"jsx\">import React, { Component } from &#39;react&#39;;\n\nclass Joke extends Component {\n  render() {\n    return (\n      &lt;div style={styles.main}&gt;\n        &lt;div style={styles.blockquote}&gt; \n          &lt;p style={styles.joke}&gt; {this.props.data} &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;hr style={styles.hr}/&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n<p>It displays whatever data it receives from the props object. Which you can notice from <code>this.props.data</code> in the code.  </p>\n<h1 id=\"What-Next\"><a href=\"#What-Next\" class=\"headerlink\" title=\"What Next\"></a>What Next</h1><p>I hope you enjoyed this article as much as I did writing it. This is my first article so please excuse my mistakes.  </p>\n<p>I recommend to checkout <a href=\"http://redux.js.org/\">redux</a> or <a href=\"https://facebook.github.io/flux/\">flux</a> for a full react application with efficient state management once you get familiar with react. Also ES6 is heavily used in react community so, check it out as well. </p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2gh151q00007o57fr28a9il","tag_id":"cj2gh154h00017o57b7bvsehg","_id":"cj2gh154z00027o57ux8ctplh"}],"Tag":[{"name":"React","_id":"cj2gh154h00017o57b7bvsehg"}]}}